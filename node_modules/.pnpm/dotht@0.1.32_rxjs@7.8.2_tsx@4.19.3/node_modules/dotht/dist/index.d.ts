import { Client } from 'polkadot-api/smoldot';
import { TypedApi, SS58String, Enum, FixedSizeArray, Binary, PalletsTypedef, StorageDescriptor, ApisTypedef, FixedSizeBinary, PolkadotClient, CompatibilityToken } from 'polkadot-api';
import { polkadot, kusama, westend, kah, wah, pah, pbh, pcl, pct, ppl, kbh, kpl, wbh, wpl, wcl, kct, wct, XcmV3Junction, BalancesTypesReasons, PreimagePalletHoldReason, WestendRuntimeRuntimeFreezeReason } from '@polkadot-api/descriptors';
import { SdkDefinition } from '@polkadot-api/common-sdk-utils';

type TDescriptorsRelay = {
    polkadot: typeof polkadot;
    kusama: typeof kusama;
    westend: typeof westend;
};
type TDescriptorsAssetHub = {
    kah: typeof kah;
    wah: typeof wah;
    pah: typeof pah;
};
type TDescriptors = {
    polkadot: typeof polkadot;
    kusama: typeof kusama;
    westend: typeof westend;
    kah: typeof kah;
    wah: typeof wah;
    pah: typeof pah;
    pbh: typeof pbh;
    pcl: typeof pcl;
    pct: typeof pct;
    ppl: typeof ppl;
    kbh: typeof kbh;
    kpl: typeof kpl;
    wbh: typeof wbh;
    wpl: typeof wpl;
    wcl: typeof wcl;
    kct: typeof kct;
    wct: typeof wct;
};
type TDescriptorsPolkadot = {
    polkadot: typeof polkadot;
    pah: typeof pah;
    pbh: typeof pbh;
    pcl: typeof pcl;
    pct: typeof pct;
    ppl: typeof ppl;
};
type TDescriptorsKusama = {
    kusama: typeof kusama;
    kah: typeof kah;
    kbh: typeof kbh;
    kct: typeof kct;
    kpl: typeof kpl;
};
type TDescriptorsWestend = {
    westend: typeof westend;
    wah: typeof wah;
    wbh: typeof wbh;
    wcl: typeof wcl;
    wpl: typeof wpl;
    wct: typeof wct;
};
type ChainIdAssetHub = keyof TDescriptorsAssetHub;
type ChainIdRelay = keyof TDescriptorsRelay;
type ChainId = keyof TDescriptors;
type ChainIdPolkadot = keyof TDescriptorsPolkadot;
type ChainIdKusama = keyof TDescriptorsKusama;
type ChainIdWestend = keyof TDescriptorsWestend;
type Descriptors<Id extends ChainId> = TDescriptors[Id];
type ApiOf<Id extends ChainId> = TypedApi<Descriptors<Id>>;
type ChainAsset = {
    decimals: number;
    symbol: string;
    name: string;
};
type TChain<Id = ChainId> = {
    id: Id;
    name: string;
    wsUrl: string[];
    paraId: number | null;
    stableTokenId: string | null;
};

type AssetStatus = Enum<{
    Live: undefined;
    Frozen: undefined;
    Destroying: undefined;
}>;
type AssetData = {
    owner: SS58String;
    issuer: SS58String;
    admin: SS58String;
    freezer: SS58String;
    supply: bigint;
    deposit: bigint;
    min_balance: bigint;
    is_sufficient: boolean;
    accounts: number;
    sufficients: number;
    approvals: number;
    status: AssetStatus;
};
type XcmV3Junctions = Enum<{
    Here: undefined;
    X1: XcmV3Junction;
    X2: FixedSizeArray<2, XcmV3Junction>;
    X3: FixedSizeArray<3, XcmV3Junction>;
    X4: FixedSizeArray<4, XcmV3Junction>;
    X5: FixedSizeArray<5, XcmV3Junction>;
    X6: FixedSizeArray<6, XcmV3Junction>;
    X7: FixedSizeArray<7, XcmV3Junction>;
    X8: FixedSizeArray<8, XcmV3Junction>;
}>;
type ForeignAssetKey = {
    parents: number;
    interior: XcmV3Junctions;
};
type AssetAccountStatus = Enum<{
    Live: undefined;
    Frozen: undefined;
    Destroying: undefined;
}>;
type AssetAccountReason = Enum<{
    Consumer: undefined;
    Sufficient: undefined;
    DepositHeld: bigint;
    DepositRefunded: undefined;
    DepositFrom: [SS58String, bigint];
}>;
type AssetAccountData = {
    balance: bigint;
    status: AssetAccountStatus;
    reason: AssetAccountReason;
};
type Metadata = {
    deposit: bigint;
    name: Binary;
    symbol: Binary;
    decimals: number;
    is_frozen: boolean;
};
type AllAssetsSDKPallets = PalletsTypedef<{
    Assets: {
        Asset: StorageDescriptor<[Key: number], AssetData, true, never>;
        Account: StorageDescriptor<[
            number,
            SS58String
        ], AssetAccountData, true, never>;
        Metadata: StorageDescriptor<[Key: number], Metadata, false, never>;
    };
    ForeignAssets: {
        Asset: StorageDescriptor<[Key: ForeignAssetKey], AssetData, true, never>;
        Account: StorageDescriptor<[
            number,
            SS58String
        ], AssetAccountData, true, never>;
        Metadata: StorageDescriptor<[
            Key: ForeignAssetKey
        ], Metadata, false, never>;
    };
    PoolAssets: {
        Asset: StorageDescriptor<[Key: number], AssetData, true, never>;
        Account: StorageDescriptor<[
            number,
            SS58String
        ], AssetAccountData, true, never>;
        Metadata: StorageDescriptor<[Key: number], Metadata, false, never>;
    };
}, {}, {}, {}, {}>;
type AllAssetsSDKDefinition = SdkDefinition<AllAssetsSDKPallets, ApisTypedef<{}>>;
type AllAssetsSdkTypedApi = TypedApi<AllAssetsSDKDefinition>;

type AccountBalance = {
    free: bigint;
    reserved: bigint;
    frozen: bigint;
    flags: bigint;
};
type SystemAccountData = {
    nonce: number;
    consumers: number;
    providers: number;
    sufficients: number;
    data: AccountBalance;
};
type LockData = {
    id: FixedSizeBinary<8>;
    amount: bigint;
    reasons: BalancesTypesReasons;
};
type ReserveData = {
    id: FixedSizeBinary<8>;
    amount: bigint;
};
type ReservesArray = Array<ReserveData>;
type LocksArray = Array<LockData>;
type AnonymousEnum<T extends {}> = T & {
    __anonymous: true;
};
type Ib6ve2drlnapui = AnonymousEnum<{
    StakingDelegation: undefined;
}>;
type I7lf1val3vmpq0 = AnonymousEnum<{
    SlashForMigrate: undefined;
}>;
type HoldId = AnonymousEnum<{
    Preimage: PreimagePalletHoldReason;
    DelegatedStaking: Ib6ve2drlnapui;
    StateTrieMigration: I7lf1val3vmpq0;
}>;
type HoldData = {
    id: HoldId;
    amount: bigint;
};
type HoldsArray = Array<HoldData>;
type FreezeData = {
    id: WestendRuntimeRuntimeFreezeReason;
    amount: bigint;
};
type FreezesArray = Array<FreezeData>;
type AllNativeBalanceSDKPallets = PalletsTypedef<{
    System: {
        Account: StorageDescriptor<[
            Key: SS58String
        ], SystemAccountData, false, never>;
    };
    Balances: {
        Account: StorageDescriptor<[
            Key: SS58String
        ], AccountBalance, false, never>;
        Locks: StorageDescriptor<[Key: SS58String], LocksArray, false, never>;
        Reserves: StorageDescriptor<[
            Key: SS58String
        ], ReservesArray, false, never>;
        Holds: StorageDescriptor<[Key: SS58String], HoldsArray, false, never>;
        Frezees: StorageDescriptor<[Key: SS58String], FreezesArray, false, never>;
    };
}, {}, {}, {}, {}>;
type AllNativeBalanceSDKDefinition = SdkDefinition<AllNativeBalanceSDKPallets, ApisTypedef<{}>>;
type NativeBalanceSdkTypedApi = TypedApi<AllNativeBalanceSDKDefinition>;

type Version = Enum<{
    V0: undefined;
    V1: undefined;
}>;
type VestingData = Array<{
    locked: bigint;
    per_block: bigint;
    starting_block: number;
}>;
type VestingSdkPallets = PalletsTypedef<{
    Vesting: {
        Vesting: StorageDescriptor<[Key: SS58String], VestingData, true, never>;
        StorageVersion: StorageDescriptor<[], Version, false, never>;
    };
}, {}, {}, {}, {}>;
type VestingSdkDefinition = SdkDefinition<VestingSdkPallets, ApisTypedef<{}>>;
type VestingSdkTypedApi = TypedApi<VestingSdkDefinition>;

type targetsData = Array<SS58String>;
type NominatorData = {
    targets: targetsData;
    submitted_in: number;
    suppressed: boolean;
};
type StakingSdkPallets = PalletsTypedef<{
    Staking: {
        Nominators: StorageDescriptor<[
            Key: SS58String
        ], NominatorData, true, never>;
        Bonded: StorageDescriptor<[Key: SS58String], SS58String, true, never>;
    };
}, {}, {}, {}, {}>;
type StakingSdkDefinition = SdkDefinition<StakingSdkPallets, ApisTypedef<{}>>;
type StakingSDKTypedApi = TypedApi<StakingSdkDefinition>;

declare const system_getAccountBalance: (chain: ChainConnector, typedApi: NativeBalanceSdkTypedApi, account: SS58String[]) => Promise<{
    free: bigint;
    reserved: bigint;
    frozen: bigint;
}>;

declare const balances_getAccountBalance: (chain: ChainConnector, typedApi: NativeBalanceSdkTypedApi, account: SS58String[]) => Promise<{
    free: bigint;
    reserved: bigint;
    frozen: bigint;
}>;

declare const DESCRIPTORS_RELAY: TDescriptorsRelay;
declare const DESCRIPTORS_ASSET_HUB: TDescriptorsAssetHub;
declare const DESCRIPTORS: TDescriptors;
declare const DESCRIPTORS_POLKADOT: TDescriptorsPolkadot;
declare const DESCRIPTORS_KUSAMA: TDescriptorsKusama;
declare const DESCRIPTORS_WESTEND: TDescriptorsWestend;

declare class ChainConnector {
    private static instance;
    client: PolkadotClient;
    chainInfo: TChain;
    pallets: string[];
    api: ApiOf<ChainId>;
    descriptors: Descriptors<ChainId>;
    compatibilityToken: CompatibilityToken;
    SS58Prefix: number;
    asset: ChainAsset;
    protected constructor(info: TChain, client: PolkadotClient, api: ApiOf<ChainId>, compatibilityToken: CompatibilityToken, SS58Prefix: number, asset: ChainAsset, pallets: string[]);
    static getInstance(): ChainConnector | undefined;
    static init(info: TChain, client: PolkadotClient): Promise<ChainConnector>;
    getBalances(): Promise<string>;
    getBlockHash(): Promise<string>;
    balanceOf(account: SS58String[]): Promise<{
        free: bigint;
        reserved: bigint;
        frozen: bigint;
    }>;
    getAssets(): Promise<{
        assets: {
            keyArgs: [Key: number];
            value: AssetData;
        }[];
        pool: {
            keyArgs: [Key: number];
            value: AssetData;
        }[];
    }>;
    static getInitChainInfo(client: PolkadotClient, typedApi: ApiOf<ChainId>, descriptors: Descriptors<ChainId>): Promise<{
        SS58Prefix: number;
        compatibilityToken: CompatibilityToken;
        asset: ChainAsset;
        pallets: string[];
    }>;
}

declare abstract class NetworkConnector {
    network: ChainIdRelay;
    client: Client | null;
    protected chains: Map<ChainId, ChainConnector>;
    protected isConnected: boolean;
    protected constructor(network: ChainIdRelay, client?: Client);
    abstract connect(): Promise<void>;
    abstract disconnect(): Promise<void>;
    abstract loadChains(): Promise<string[]>;
    getChain(chainId: ChainId): ChainConnector | undefined;
    getStatus(): string;
    getChains(): ChainId[];
}

declare class WsHubConnector extends NetworkConnector {
    private static instances;
    private status;
    protected constructor(network: ChainIdRelay, client?: Client);
    static getType(): string;
    connect(): Promise<void>;
    loadChains(): Promise<string[]>;
    disconnect(): Promise<void>;
    getStatus(): string;
    static getInstance(network: ChainIdRelay): WsHubConnector;
}

type chainDefinition = {
    network: ChainIdRelay;
    smoldot: string | null;
    info: TChain;
};
declare const WellKnownChains: Record<ChainId, chainDefinition>;

declare class SmHubConnector extends NetworkConnector {
    private static instances;
    private status;
    protected constructor(network: ChainIdRelay, client?: Client);
    static getType(): string;
    connect(): Promise<void>;
    loadChains(): Promise<ChainId[]>;
    disconnect(): Promise<void>;
    getStatus(): string;
    static getInstance(network: ChainIdRelay): SmHubConnector;
}

declare function createNetworkConnector(network: string, type: string): NetworkConnector;

interface ConnectorStatic<T extends NetworkConnector = NetworkConnector> {
    getType(): string;
    getInstance(network: string): T;
}
declare class ConnectorRegistry {
    private static registry;
    static createConnector(network: string, type: string): NetworkConnector | undefined;
    static listConnectors(): string[];
    static getConnector(network: string, type: string): NetworkConnector;
}

declare class Account {
    private addresses;
    constructor(addresses: SS58String[]);
    listAddresses(): SS58String[];
    addAddress(address: SS58String): void;
    removeAddress(address: SS58String): void;
    clearAddresses(): void;
    static getAddressPubkey(address: string): string;
    balance(networkConnector: NetworkConnector, chain?: ChainId): Promise<{
        free: bigint;
        reserved: bigint;
        frozen: bigint;
    }>;
}

declare class ChainRegistry {
    private static registry;
    static getOrCreate<T extends ChainConnector>(info: TChain, client?: PolkadotClient): Promise<ChainConnector>;
    static get(chainName: string): ChainConnector | undefined;
    static listChains(): string[];
    static removeChain(chianId: ChainId): boolean;
    static clear(): void;
}

export { Account, ChainConnector, ChainRegistry, ConnectorRegistry, DESCRIPTORS, DESCRIPTORS_ASSET_HUB, DESCRIPTORS_KUSAMA, DESCRIPTORS_POLKADOT, DESCRIPTORS_RELAY, DESCRIPTORS_WESTEND, NetworkConnector, SmHubConnector, WellKnownChains, WsHubConnector, balances_getAccountBalance, createNetworkConnector, system_getAccountBalance };
export type { AccountBalance, AllAssetsSDKDefinition, AllAssetsSDKPallets, AllAssetsSdkTypedApi, AllNativeBalanceSDKDefinition, AllNativeBalanceSDKPallets, ApiOf, AssetAccountData, AssetAccountReason, AssetAccountStatus, AssetData, AssetStatus, ChainAsset, ChainId, ChainIdAssetHub, ChainIdKusama, ChainIdPolkadot, ChainIdRelay, ChainIdWestend, ConnectorStatic, Descriptors, ForeignAssetKey, FreezeData, FreezesArray, HoldData, HoldId, HoldsArray, I7lf1val3vmpq0, Ib6ve2drlnapui, LockData, LocksArray, Metadata, NativeBalanceSdkTypedApi, ReserveData, ReservesArray, StakingSDKTypedApi, SystemAccountData, TChain, TDescriptors, TDescriptorsAssetHub, TDescriptorsKusama, TDescriptorsPolkadot, TDescriptorsRelay, TDescriptorsWestend, Version, VestingData, VestingSdkDefinition, VestingSdkPallets, VestingSdkTypedApi, XcmV3Junctions };
