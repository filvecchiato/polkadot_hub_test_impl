// .papi/descriptors/src/wct_metadata.ts
var binMeta = "";
var wct_metadata_default = binMeta;
export {
  wct_metadata_default as default
};
